agent.sources = s1 
agent.channels = c1
agent.sinks = k1


# For each one of the sources, the type is defined
agent.sources.s1.type = org.apache.flume.source.kafka.KafkaSource
agent.sources.s1.channels = c1
agent.sources.s1.batchSize = 5000
agent.sources.s1.batchDurationMillis = 2000
agent.sources.s1.kafka.bootstrap.servers = localhost:9092
agent.sources.s1.kafka.topics = topic1,topic2
#agent.sources.s1.kafka.topics.regex = ^topic[0-9]$
agent.sources.s1.kafka.consumer.group.id = custom.g.id
#the default agent.sources.kafka.consumer.group.id=flume is used


# kafka 安全验证
# using SSL - TLS based encryption with optional authentication
#a1.sources.s1.kafka.consumer.security.protocol = SSL
#a1.sources.s1.kafka.consumer.ssl.truststore.location=/path/to/truststore.jks
#a1.sources.s1.kafka.consumer.ssl.truststore.password=<password to access the truststore>
#a1.sources.s1.kafka.consumer.ssl.endpoint.identification.algorithm=HTTPS

# kerberos 验证
#JAVA_OPTS="$JAVA_OPTS -Djava.security.krb5.conf=/path/to/krb5.conf"
#JAVA_OPTS="$JAVA_OPTS -Djava.security.auth.login.config=/path/to/flume_jaas.conf"

# using SASL_PLAINTEXT - Kerberos or plaintext authentication with no data encryption
#a1.sources.s1.kafka.consumer.security.protocol = SASL_PLAINTEXT
#a1.sources.s1.kafka.consumer.sasl.mechanism = GSSAPI
#a1.sources.s1.kafka.consumer.sasl.kerberos.service.name = kafka

# using SASL_SSL - Kerberos or plaintext authentication with data encryption
#a1.sources.s1.kafka.consumer.security.protocol = SASL_SSL
#a1.sources.s1.kafka.consumer.sasl.mechanism = GSSAPI
#a1.sources.s1.kafka.consumer.sasl.kerberos.service.name = kafka
#a1.sources.s1.kafka.consumer.ssl.truststore.location=/path/to/truststore.jks
#a1.sources.s1.kafka.consumer.ssl.truststore.password=<password to access the truststore>


# Each sink's type must be defined
agent.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink
agent.sinks.k1.brokerList = localhost:9092
agent.sinks.k1.topic = flume
agent.sinks.k1.serializer.class = kafka.serializer.StringEncoder
agent.sinks.k1.channel = c1


# Each channel's type is defined.
agent.channels.c1.type = memory
agent.channels.c1.transactionCapacity = 100
agent.channels.c1.capacity = 10000